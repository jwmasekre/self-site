<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>powershell on /home/</title>
    <link>/tags/powershell/</link>
    <description>Recent content in powershell on /home/</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 27 Jan 2020 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/tags/powershell/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>josh&#39;s posh #3 - get-status: a jwmasekre cmdlet</title>
      <link>/posts/joshs_posh_3_statusupdates/</link>
      <pubDate>Mon, 27 Jan 2020 00:00:00 +0000</pubDate>
      
      <guid>/posts/joshs_posh_3_statusupdates/</guid>
      <description>Got the idea for this one from a conversation I had with one of our senior network engineers at work. I had been using ping -t &amp;lt;ip&amp;gt; for seeing when someone rebooted devices and they came back online. That works fine for one device, but I ended up needing multiple, so I input a couple commands in powershell:
$iplist = @()$iplist += &amp;lt;ip1&amp;gt;$iplist += &amp;lt;ip2&amp;gt;$iplist += &amp;lt;ip3&amp;gt;while ($true) {foreach ($ip in $iplist) {if (test-connection -computername $ip -count 1 -erroraction silentlycontinue){write-host &amp;#34;$ip is up&amp;#34;}}}which creates an array, adds the three IP addresses I wanted to test, and then alternates between test-connection on them, which is essentially a ping, but writes &amp;ldquo;&amp;lt;ip&amp;gt; is up&amp;rdquo; instead of the output of test-connection.</description>
    </item>
    
    <item>
      <title>josh&#39;s posh #2 - an admin console for everyone</title>
      <link>/posts/joshs_posh_2_adminconsole/</link>
      <pubDate>Mon, 16 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/joshs_posh_2_adminconsole/</guid>
      <description>Today&#39;s post is covering one of the first things I made at my previous employer, which I also have a sanitized version on my github here. We used smartcards for login, and we had separate cards and accounts for administration. We also couldn&#39;t select a separate account through UAC for installers/administrative applications, so the solution was to open command prompt and run runas /smartcard cmd.exe, select the admin card, and have a command prompt open as our admin account.</description>
    </item>
    
    <item>
      <title>josh&#39;s posh #1 - parsing the useraccountcontrol property</title>
      <link>/posts/joshs_posh_1_useraccountcontrol/</link>
      <pubDate>Wed, 11 Dec 2019 00:00:00 +0000</pubDate>
      
      <guid>/posts/joshs_posh_1_useraccountcontrol/</guid>
      <description>This first one is the inspiration for the site. I&#39;ve been a bit obsessed with bitwise anding and parsing flags stored as bits ever since BPF in SANS SEC503. I ran into a situation recently where I wanted to check whether a smartcard was required for an account, but I didn&#39;t have access to active directory users and computers (dsa). A quick google search told me that the value for &amp;ldquo;smartcard required&amp;rdquo; is 262144, which briefly confused me, since that same search also told me basically all those checkboxes on the account screen are governed by the useraccountcontrol property.</description>
    </item>
    
  </channel>
</rss>